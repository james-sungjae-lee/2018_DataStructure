// *******************************************************************************************************************
// * Name : 이성재
// * Student ID : 20132651
// * Program ID : HW4_BFS.cpp
// *
// * Algorithm Description
// * : 매트릭스 형태의 그래프 데이터를 링크드 리스트 형태의 데이터로 변환하고, 깊이 우선 탐색으로 특정 시작점부터
// * : 그래프 데이터를 탐색한 결과를 순착적으로 출력하는 BFS 알고리즘입니다.
// * : 1. 깊이 우선 탐색을 위한 링크드 리스트를 생성하기 위해, Node와 Graph 클래스를 정의합니다.
// * :    Node 클래스 내부에는 정수 데이터와 링크드 리스트를 구성하기 위한 next 노드 포인터가 존재합니다.
// * :    Graph 클래스 내부에는 실제 링크드 리스트들이 저장될 graph 노드 포인터 배열, 넓이 우선 탐색을 시행하기 위한
// * :    큐 자료구조와 큐 삽입 / 삭제 함수가 정의되어 있습니다. 또한 매트릭스 형태의 최초 그래프 데이터, 매트릭스 출력 함수,
// * :    매트릭스를 링크드 리스트로 변환하기 위한 함수가 정의되어 있습니다.
// * : 2. 헤더파일에서 정의된 위의 함수들은 "HW4_BFS_ADT.cpp" 파일에서 상세하게 구현되어 있습니다.
// * :    가장 먼저 matrixToList 함수가 호출되어 최초의 매트릭스 데이터를 링크드 리스트 형태로 변환합니다.
// * :    다음으로 특정 시작점 v 부터 넓이 우선탐색을 시행하는 BFS 함수를 통해 출력이 시행됩니다. 이 때 BFS함수에서는
// * :    앞에서 정의내린 큐 자료구조와 삽입 / 삭제 함수가 호출되며 넓이 우선 탐색을 시행합니다.
// * : 3. Adjacent Matrix 를 확인하기 위해 printMatrix 함수를 호출할 경우 최초의 매트릭스 데이터가 출력됩니다.
// *
// * Variables
// * : BFS를 구현하기 위한 변수들은 모두 헤더 파일과 ADT파일에 정의되어 있습니다.
// * : 어느 시작점을 선택할지 사용자에게 선택권을 주기 위해 main 함수에서 v 변수를 설정해 BFS의 인자로 넘겨줍니다.
// ********************************************************************************************************************

#include "HW4_BFS_ADT.cpp"

// ********************************************************************************************************************
// * function: int main
// * description
// * : 1. 가장 먼저 BFS 를 진행할 시작점인 v 값을 설정합니다. 현재는 0으로 고정되었지만, cin 등을 이용해 외부에서 입력받을 수도 있습니다.
// * : 2. 다음으로 Adjacent Matrix 를 출력하기 위해 printMatrix 함수를 호출합니다.
// * : 3. 최초의 매트릭스를 링크드 리스트 형태로 변환하는 함수를 시행합니다.
// * : 4. 마지막으로 처음에 설정한 v 값을 인자로 BFS 함수를 시행합니다. 현재는 v 가 0으로 설정되어 있으므로
// * :    시작점을 0으로 하는 넓이 우선 탐색의 결과가 나타납니다.
// ********************************************************************************************************************

int main(int argc, char const *argv[]) {
  int v = 0;

  Graph bfsGraph;
  std::cout << '\n';
  bfsGraph.printMatrix();
  bfsGraph.matrixToList();
  bfsGraph.BFS(v);
  std::cout << '\n';
  std::cout << '\n';

  return 0;
}
